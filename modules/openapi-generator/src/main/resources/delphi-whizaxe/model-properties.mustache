{{>header_autogen}}

unit {{#models}}{{#model}}{{classFilename}}{{/model}}{{/models}};

interface

uses
  whizaxe.REST.Exceptions{{#imports}}{{#-first}},{{/-first}}
  {{{import}}}{{^-last}},{{/-last}}{{/imports}};

type
{{#models}}
{{#model}}

  {{#isEnum}}
  TEnum{{classname}} = (
    {{#allowableValues}}{{#enumVars}}ev{{{name}}}{{^-last}}, {{/-last}}
    {{/enumVars}}{{/allowableValues}}
  );
  {{/isEnum}}
  
//  {$RTTI EXPLICIT PROPERTIES([vcPublic])}
  {{#isArray}}
  T{{classname}} = class(T{{^items.isPrimitiveType}}Object{{/items.isPrimitiveType}}List<{{items.dataType}}>)
  {{/isArray}}
  {{^isArray}}
  T{{classname}} = class
  {{/isArray}}
  private
    {{#vendorExtensions.x-codegen-delphi-enum}}FValue: TEnum{{classname}};{{/vendorExtensions.x-codegen-delphi-enum}}
    {{#vars}}
    {{vendorExtensions.x-delphi-field-name}}: {{{dataType}}} {{#deprecated}} deprecated{{/deprecated}}; {{#description}}// {{description}}{{/description}}
    {{vendorExtensions.x-delphi-field-name}}IsSet: boolean;
    {{/vars}}

    {{#vars}}
    procedure {{vendorExtensions.x-delphi-setter-name}}(AValue: {{{dataType}}});
    {{/vars}}

    {{#vars}}
    function {{baseName}}IsValid(out AErrorMessage: string): boolean;
    {{/vars}}
  public
    {{#isArray}}{{^items.isPrimitiveType}}
    constructor Create;
    {{/items.isPrimitiveType}}{{/isArray}}
    {{#vars}}
    property {{{vendorExtensions.x-delphi-property-name}}}: {{{dataType}}} read {{vendorExtensions.x-delphi-field-name}} write {{vendorExtensions.x-delphi-setter-name}};
    property {{{vendorExtensions.x-delphi-property-name}}}IsSet: boolean read {{vendorExtensions.x-delphi-field-name}}IsSet;
    {{/vars}}

    /// <summary>
    /// Validate the current data in the model. Throws a EValidationException on failure.
    /// </summary>
    procedure Validate(); overload;

    /// <summary>
    /// Validate the current data in the model. Returns false and erro message for invalid model.
    /// </summary>
    function Validate(out AErrorMsg: string): boolean; overload;

    /// <summary>
    /// Serialize model to JSON
    /// </summary>
    function AsJson: string;

    /// <summary>
    /// Update model from JSON string
    /// </summary>
    procedure UpdateFromJson(AJson: string);

    {{#vendorExtensions.x-codegen-delphi-enum}}
    
    /// <summary>
    /// Convert enum to string value 
    /// </summary>
    class function AsString(Value: TEnum{{classname}}): string;
    
    /// <summary>
    /// Convert string to enum value 
    /// </summary>
    class function FromString(Value: string): TEnum{{classname}};
    {{/vendorExtensions.x-codegen-delphi-enum}}
  end;
 
{{/model}}
{{/models}}

implementation

uses
  System.Classes,
  System.SysUtils,{{#models}}{{#model}}{{#isEnum}}
  whizaxe.reflections,
{{/isEnum}}{{/model}}{{/models}}
  whizaxe.serialization,
  whizaxe.OpenApi.validators;
  
{{#models}}
{{#model}}
{ T{{classname}} }

{{#isArray}}{{^items.isPrimitiveType}}
constructor T{{classname}}.Create;
begin
  inherited Create(true);
end;
{{/items.isPrimitiveType}}{{/isArray}}

function T{{classname}}.AsJson: string;
begin
  result := TSerializer.ObjectToJSON(self);
end;

procedure T{{classname}}.UpdateFromJson(AJson: string);
begin
  TSerializer.UpdateObjectFormJson<T{{classname}}>(self, AJson);
end;

procedure T{{classname}}.Validate;
var
  msg: string;
begin
  if not self.Validate(msg) then
    raise EWxRestValidationException.Create(msg);
end;

function T{{classname}}.Validate(out AErrorMsg: string): boolean;
var
  sb: TStringBuilder;
  errorMsg: string;
begin
  errorMsg := '';
  result := false;
  sb := TStringBuilder.Create;
  try
    {{#vars}}
    if not {{baseName}}IsValid(errorMsg) then
      sb.AppendLine(errorMsg);
    {{/vars}}
    AErrorMsg := sb.ToString();
    result := AErrorMsg = '';
  finally
    sb.Free;
  end;
end;

{{#vendorExtensions.x-codegen-delphi-enum}}
class function T{{classname}}.AsString(Value: TEnum{{classname}}): string;
begin
  result := TReflection.EnumToString(TypeInfo(TEnum{{classname}}), ord(Value));
  if Result.startsWith('ev_') then
    Result := Result.substring(3);
end;

class function T{{classname}}.FromString(Value: string): TEnum{{classname}};
begin
  result := TEnum{{classname}}(TReflection.StringToEnum(TypeInfo(TEnum{{classname}}), 'ev_' + Value));
end;
{{/vendorExtensions.x-codegen-delphi-enum}}

{$region 'Setters'}
{{#vars}}
procedure T{{classname}}.{{vendorExtensions.x-delphi-setter-name}}(AValue: {{{dataType}}});
begin
  {{vendorExtensions.x-delphi-field-name}} := AValue;
  {{vendorExtensions.x-delphi-field-name}}IsSet := true;
end;

{{/vars}}
{$endregion}

{$region 'Validations'}

{{#vars}}
function T{{classname}}.{{baseName}}IsValid(out AErrorMessage: string): boolean;
{{#hasValidation}}var
  validator: IValidator<{{{dataType}}}>;
{{/hasValidation}}
begin
  result := true;
  {{#hasValidation}}
  {{#isString}} 
  validator := TStringValidator.Create({{#required}}TRequiredStringValidator.Create(nil){{/required}}{{^required}}nil{{/required}}, {{#minLength}}{{minLength}}{{/minLength}}{{^minLength}}0{{/minLength}}, {{#maxLength}}{{maxLength}}{{/maxLength}}{{^maxLength}}0{{/maxLength}}); 
  {{/isString}}
  {{#isInteger}}
  validator := TIntegerValidator.Create(nil,{{#minimum}}true, {{minimum}},{{/minimum}}{{^minimum}}false, 0,{{/minimum}}{{#maximum}}true, {{maximum}}{{/maximum}}{{^maximum}}false, 0{{/maximum}});
  {{/isInteger}}
  {{#isNumber}}
  validator := TCurrencyValidator.Create({{#multipleOf}}TPrecisionValidator.Create(nil,{{multipleOf}}){{/multipleOf}}{{^multipleOf}}nil{{/multipleOf}},{{#minimum}} true, {{minimum}},{{/minimum}}{{^minimum}} false, 0,{{/minimum}}{{#maximum}} true, {{maximum}}{{/maximum}}{{^maximum}} false, 0{{/maximum}});
  {{/isNumber}}
  result := validator.Validate({{vendorExtensions.x-delphi-field-name}}, AErrorMessage);
  {{/hasValidation}}
end;

{{/vars}}
{$endregion}

{{/model}}

{{/models}}
end.