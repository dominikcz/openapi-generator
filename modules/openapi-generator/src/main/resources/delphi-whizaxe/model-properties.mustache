{{>header_autogen}}

unit {{#models}}{{#model}}{{classFilename}}{{/model}}{{/models}};

interface

uses
  {{#models}}{{#model}}{{#isEnum}}Neon.Core.Attributes,{{/isEnum}}{{/model}}{{/models}}
  whizaxe.REST.Exceptions{{#imports}}{{#-first}},{{/-first}}
  {{{import}}}{{^-last}},{{/-last}}{{/imports}};
  

type

{{#models}}{{#model}}{{#isEnum}}
  T{{classname}}Names = class
  public const{{#allowableValues}}{{#enumVars}}
    c{{name}} = '{{{value}}}';{{/enumVars}}{{/allowableValues}}
    {{className}}EnumNames = {{#allowableValues}}{{#enumVars}}
           {{^-first}}+ {{/-first}}c{{{name}}}{{^-last}} + ',' {{/-last}}{{/enumVars}}{{/allowableValues}};
  end;{{/isEnum}}{{/model}}{{/models}}  


{{#models}}
{{#model}}

  {{#isEnum}}
  [NeonEnumNames(T{{classname}}Names.{{className}}Enumnames)]
  T{{classname}} = (
    {{#allowableValues}}{{#enumVars}}ev{{{name}}}{{^-last}}, {{/-last}}
    {{/enumVars}}{{/allowableValues}}
  );
  {{/isEnum}}
  
  {{^isEnum}}
//  {$RTTI EXPLICIT PROPERTIES([vcPublic])}

  T{{classname}} = class{{#isArray}}({{{dataType}}}){{/isArray}}
  private
    {{#vendorExtensions.x-codegen-delphi-enum}}FValue: TEnum{{classname}};{{/vendorExtensions.x-codegen-delphi-enum}}
    {{#vars}}
    {{vendorExtensions.x-delphi-field-name}}: {{{dataType}}} {{#deprecated}} deprecated{{/deprecated}}; {{#description}}// {{description}}{{/description}}
    {{vendorExtensions.x-delphi-field-name}}IsSet: boolean;
    {{/vars}}

    {{#vars}}
    procedure {{vendorExtensions.x-delphi-setter-name}}(AValue: {{{dataType}}});
    {{/vars}}

    {{#vars}}
    function {{baseName}}IsValid(out AErrorMessage: string): boolean;
    {{/vars}}
  public
    {{^isArray}}
    constructor Create;
    destructor Destroy; override;
    {{/isArray}}
    {{#isArray}}{{^items.isPrimitiveType}}
    constructor Create;
    {{/items.isPrimitiveType}}{{/isArray}}
    
    {{#vars}}
    
    property {{{name}}}: {{{dataType}}} read {{vendorExtensions.x-delphi-field-name}} write {{vendorExtensions.x-delphi-setter-name}};
    {{/vars}}
    
    {{#vars}}
    function {{baseName}}IsSet: boolean;
    {{/vars}}

    /// <summary>
    /// Validate the current data in the model. Throws a EValidationException on failure.
    /// </summary>
    procedure Validate(); overload;

    /// <summary>
    /// Validate the current data in the model. Returns false and erro message for invalid model.
    /// </summary>
    function Validate(out AErrorMsg: string): boolean; overload;

    /// <summary>
    /// Serialize model to JSON
    /// </summary>
    function AsJson: string;

    /// <summary>
    /// Update model from JSON string
    /// </summary>
    procedure UpdateFromJson(AJson: string);

  end;
{{/isEnum}} 
{{/model}}
{{/models}}

{{#models}}
{{#model}}

implementation
{{^isEnum}}

uses
  System.Classes,
  System.SysUtils,{{#models}}{{#model}}{{#isEnum}}
  whizaxe.reflections,
{{/isEnum}}{{/model}}{{/models}}
  whizaxe.serialization,
  whizaxe.OpenApi.validators,
  Neon.Core.Types;
{{/isEnum}} 
{{/model}}
{{/models}}
  
{{#models}}
{{#model}}
{{^isEnum}}
{ T{{classname}} }

{{#isArray}}{{^items.isPrimitiveType}}
constructor T{{classname}}.Create;
begin
  inherited Create(true);
end;
{{/items.isPrimitiveType}}{{/isArray}}

{{^isArray}}
constructor T{{classname}}.Create;
begin
  inherited Create;
  {{#vars}}
  {{#isModel}}{{vendorExtensions.x-delphi-field-name}} := {{{dataType}}}.Create;{{/isModel}}
  {{/vars}}
end;

destructor T{{classname}}.Destroy;
begin
  {{#vars}}
  {{#isModel}}{{vendorExtensions.x-delphi-field-name}}.Free;{{/isModel}}
  {{/vars}}
  inherited;
end;
{{/isArray}}


function T{{classname}}.AsJson: string;
begin
  Result := TSerializer.SerializeObject(self);
end;

procedure T{{classname}}.UpdateFromJson(AJson: string);
begin
   try
    TSerializer.DeserializeObject(self, AJson);
  except
    on E: ENeonException do
      raise EWxRestValidationException.Create('Cannot deserialize json');
  end;
end;

procedure T{{classname}}.Validate;
var
  msg: string;
begin
  if not self.Validate(msg) then
    raise EWxRestValidationException.Create(msg);
end;

function T{{classname}}.Validate(out AErrorMsg: string): boolean;
var
  sb: TStringBuilder;
  errorMsg: string;
const
  MSG = 'Field %s is not set or has invalid value. %s';
begin
  errorMsg := '';
  result := false;
  sb := TStringBuilder.Create;
  try
    {{#vars}}
    if not {{baseName}}IsValid(errorMsg) then
      sb.AppendLine(format(MSG, ['{{name}}', errorMsg]));
    {{/vars}}
    AErrorMsg := sb.ToString();
    result := AErrorMsg = '';
  finally
    sb.Free;
  end;
end;


{$region 'Setters'}
{{#vars}}
procedure T{{classname}}.{{vendorExtensions.x-delphi-setter-name}}(AValue: {{{dataType}}});
begin
  {{vendorExtensions.x-delphi-field-name}}IsSet := {{#isModel}}Assigned(AValue){{/isModel}}{{^isModel}}true{{/isModel}};{{#isModel}}
  if AValue = {{vendorExtensions.x-delphi-field-name}} then
    exit;
  {{vendorExtensions.x-delphi-field-name}}.Free;{{/isModel}}
  {{vendorExtensions.x-delphi-field-name}} := AValue;
end;

{{/vars}}
{$endregion}

{$region 'Validations'}

{{#vars}}
function T{{classname}}.{{baseName}}IsValid(out AErrorMessage: string): boolean;
{{#hasValidation}}var
  validator: IValidator<{{{dataType}}}>;
{{/hasValidation}}
begin
  result := true;
  {{#required}}
  if not {{vendorExtensions.x-delphi-field-name}}IsSet then
    exit(false);
  {{/required}}
  {{#hasValidation}}
  if {{vendorExtensions.x-delphi-field-name}}IsSet then
  begin
  {{#isString}} 
    validator := TStringLengthValidator.Create({{#required}}TStringRequiredValidator.Create(nil){{/required}}{{^required}}nil{{/required}}, {{#minLength}}{{minLength}}{{/minLength}}{{^minLength}}0{{/minLength}}, {{#maxLength}}{{maxLength}}{{/maxLength}}{{^maxLength}}0{{/maxLength}}); 
  {{/isString}}
  {{#isInteger}}
    validator := TIntegerValidator.Create(nil, {{#minimum}}true, {{minimum}},{{/minimum}}{{^minimum}}false, 0,{{/minimum}}{{#maximum}}true, {{maximum}}{{/maximum}}{{^maximum}}false, 0{{/maximum}});
  {{/isInteger}}
  {{#isNumber}}
    validator := TCurrencyValidator.Create({{#multipleOf}}TPrecisionValidator.Create(nil,{{multipleOf}}){{/multipleOf}}{{^multipleOf}}nil{{/multipleOf}},{{#minimum}} true, {{minimum}},{{/minimum}}{{^minimum}} false, 0,{{/minimum}}{{#maximum}} true, {{maximum}}{{/maximum}}{{^maximum}} false, 0{{/maximum}});
  {{/isNumber}}
    result := validator.Validate({{vendorExtensions.x-delphi-field-name}}, AErrorMessage);
  end;
  {{/hasValidation}}
end;

function T{{classname}}.{{baseName}}IsSet: boolean;
begin
  result := {{vendorExtensions.x-delphi-field-name}}IsSet;
end;

{{/vars}}
{$endregion}

{{/isEnum}}
{{/model}}
{{/models}}
end.
