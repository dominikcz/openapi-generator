{{>header_autogen}}

unit {{#models}}{{#model}}{{classFilename}}{{/model}}{{/models}};

interface

uses
  whizaxe.REST.Exceptions{{#imports}}{{#-first}},{{/-first}}
  {{{import}}}{{^-last}},{{/-last}}{{/imports}};

type
{{#models}}
{{#model}}

  {{#isEnum}}
  TEnum{{classname}} = (
    {{#allowableValues}}{{#enumVars}}ev{{{name}}}{{^-last}}, {{/-last}}
    {{/enumVars}}{{/allowableValues}}
  );
  {{/isEnum}}
  
//  {$RTTI EXPLICIT PROPERTIES([vcPublic])}
  {{#isArray}}
  T{{classname}} = class(T{{^items.isPrimitiveType}}Object{{/items.isPrimitiveType}}List<{{items.dataType}}>)
  {{/isArray}}
  {{^isArray}}
  T{{classname}} = class
  {{/isArray}}
  private
    {{#vars}}
    {{vendorExtensions.x-delphi-field-name}}: {{{dataType}}} {{#deprecated}} deprecated{{/deprecated}}; {{#description}}// {{description}}{{/description}}
    {{vendorExtensions.x-delphi-field-name}}IsSet: boolean;
    {{/vars}}

    {{#vars}}
    procedure {{vendorExtensions.x-delphi-setter-name}}(AValue: {{{dataType}}});
    {{/vars}}

    {{#vars}}
    function {{baseName}}IsValid: boolean;
    {{/vars}}
  public
    {{#isArray}}{{^items.isPrimitiveType}}
    constructor Create;
    {{/items.isPrimitiveType}}{{/isArray}}
    {{#vars}}
    property {{{vendorExtensions.x-delphi-property-name}}}: {{{dataType}}} read {{vendorExtensions.x-delphi-field-name}} write {{vendorExtensions.x-delphi-setter-name}};
    property {{{vendorExtensions.x-delphi-property-name}}}IsSet: boolean read {{vendorExtensions.x-delphi-field-name}}IsSet;
    {{/vars}}

    /// <summary>
    /// Validate the current data in the model. Throws a EValidationException on failure.
    /// </summary>
    procedure Validate(); overload;

    /// <summary>
    /// Validate the current data in the model. Returns false and erro message for invalid model.
    /// </summary>
    function Validate(out ErrorMsg: string): boolean; overload;

    /// <summary>
    /// Serialize model to JSON
    /// </summary>
    function AsJson: string;

    /// <summary>
    /// Update model from JSON string
    /// </summary>
    procedure UpdateFromJson(AJson: string);
    {{#isEnum}}

    /// <summary>
    /// Update model from JSON string
    /// </summary>
    class function AsString(Value: TEnum{{classname}}): string;
    {{/isEnum}}

  end;
 
{{/model}}
{{/models}}

implementation

uses
  System.Classes,
  System.SysUtils,{{#models}}{{#model}}{{#isEnum}}
  whizaxe.reflections,
{{/isEnum}}{{/model}}{{/models}}
  whizaxe.serialization;
  
{{#models}}
{{#model}}
{ T{{classname}} }

{{#isArray}}{{^items.isPrimitiveType}}
constructor T{{classname}}.Create;
begin
  inherited Create(true);
end;
{{/items.isPrimitiveType}}{{/isArray}}

function T{{classname}}.AsJson: string;
begin
  result := TSerializer.ObjectToJSON(self);
end;

procedure T{{classname}}.UpdateFromJson(AJson: string);
begin
  TSerializer.UpdateObjectFormJson<T{{classname}}>(self, AJson);
end;

procedure T{{classname}}.Validate;
var
  msg: string;
begin
  if not self.Validate(msg) then
    raise EWxRestValidationException.Create(msg);
end;

function T{{classname}}.Validate(out ErrorMsg: string): boolean;
const
  MSG = 'Field %s is not set or has invalid value';
var
  sb: TStringBuilder;
begin
  result := false;
  sb := TStringBuilder.Create;
  try
    {{#vars}}{{#required}}
    if not {{baseName}}IsValid then
      sb.AppendLine(format(MSG, ['{{name}}']));
    {{/required}}{{/vars}}
    errorMsg := sb.ToString();
    result := errorMsg = '';
  finally
    sb.Free;
  end;
end;

{{#isEnum}}
class function T{{classname}}.AsString(Value: TEnum{{classname}}): string;
begin
  result := TReflection.EnumToString(TypeInfo(TEnum{{classname}}), ord(Value));
end;
{{/isEnum}}

{$region 'Setters'}
{{#vars}}
procedure T{{classname}}.{{vendorExtensions.x-delphi-setter-name}}(AValue: {{{dataType}}});
begin
  {{vendorExtensions.x-delphi-field-name}} := AValue;
  {{vendorExtensions.x-delphi-field-name}}IsSet := true;
end;

{{/vars}}
{$endregion}

{$region 'Validations'}

{{#vars}}
function T{{classname}}.{{baseName}}IsValid: boolean;
begin
  result := {{baseName}}IsSet;
  {{#isString}}
  {{#minLength}}result := result and ({{name}}.Length >= {{minLength}}){{/minLength}};
  {{#maxLength}}result := result and ({{name}}.Length <= {{maxLength}}){{/maxLength}};
  {{/isString}}
  
  {{#isNumeric}}
  {{#minimum}}result := result and ({{name}} >= {{minimum}}){{/minimum}};
  {{#maximum}}result := result and ({{name}} <= {{maximum}}){{/maximum}};
  {{/isNumeric}}
end;

{{/vars}}
{$endregion}

{{/model}}

{{/models}}
end.