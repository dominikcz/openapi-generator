{{>header_autogen}}

unit {{classname}}.Rest;

interface

uses
  System.SysUtils,
  whizaxe.rest.CommandHandler,
  whizaxe.http.types,
  whizaxe.rest.Request,
  {{classname}}Interface;

type
{{#operations}}

  // {$RTTI EXPLICIT METHODS([vcPublic])}
  T{{classname}}Rest = class 
  private
    FApi: I{{classname}};
  public
    {{#operation}}
    /// Operation {{{operationId}}}
    /// <summary>{{{summary}}}</summary>{{#remarks}}
    /// <remarks>{{.}}</remarks>{{/remarks}} 
    {{#allParams}}   
    /// {{paramName}}: {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
    {{/allParams}}   
    [RestApi('{{httpMethod}}', '{{{path}}}')]
    procedure {{operationId}}(ARequest: TRestRequest; var AResult: THTTPResult){{#isDeprecated}}; deprecated{{/isDeprecated}};
    
    {{/operation}}
    
    constructor Create();
  end;

implementation

uses
  whizaxe.serialization,
  {{classname}}{{#imports}}{{#-first}},{{/-first}}
  {{{import}}}{{^-last}},{{/-last}}{{/imports}};
  
{ T{{classname}} }

constructor T{{classname}}Rest.Create;
begin
  FAPi := T{{classname}}.Create;
end;

{{#operation}}
procedure T{{classname}}Rest.{{operationId}}(ARequest: TRestRequest; var AResult: THTTPResult);
{{#vendorExtensions.x-codegen-delphi-needs-var}}
var
{{/vendorExtensions.x-codegen-delphi-needs-var}}
{{#allParams}}
  {{{paramName}}}: {{{dataType}}};
{{/allParams}}
  {{#returnType}}responseObj: {{{.}}};{{/returnType}}
begin
{{#returnType}}
  {{^returnSimpleType}}
  responseObj := nil;
  {{/returnSimpleType}}
{{/returnType}}
{{#pathParams}}
  {{#isInteger}}{{paramName}} := ARequest.GetPathParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isInteger}}
  {{#isBoolean}}{{paramName}} := ARequest.GetPathParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isBoolean}}
  {{#isString}}{{paramName}} := ARequest.GetPathParam('{{paramName}}', '{{{defaultValue}}}', {{required}});{{/isString}}
{{/pathParams}}
{{#queryParams}}
  {{#isInteger}}{{paramName}} := ARequest.GetQueryParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isInteger}}
  {{#isBoolean}}{{paramName}} := ARequest.GetQueryParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isBoolean}}
  {{#isString}}{{paramName}} := ARequest.GetQueryParam('{{paramName}}', '{{{defaultValue}}}', {{required}});{{/isString}}
{{/queryParams}}
{{#bodyParam}}
  {{paramName}} := ARequest.GetBodyParam<{{{dataType}}}>({{required}});
{{/bodyParam}}
{{#vendorExtensions.x-codegen-delphi-needs-free}}
  try
{{/vendorExtensions.x-codegen-delphi-needs-free}}
{{#bodyParam}}
    {{^isArray}}{{paramName}}.Validate;{{/isArray}}
{{/bodyParam}}
{{#headerParams}}
  {{paramName}} := ARequest.GetHeaderParam('{{paramName}}', '{{{defaultValue}}}', {{required}});
{{/headerParams}}
{{#returnType}}
    responseObj := FApi.{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});
    AResult.SetResult(hs2xx_OK, responseObj, 'OK');
{{/returnType}}
{{^returnType}}
    FApi.{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});
    AResult.SetResult(hs2xx_OK);
{{/returnType}}
{{#vendorExtensions.x-codegen-delphi-needs-free}}
  finally
{{#returnType}}
  {{^returnSimpleType}}
    responseObj.Free;
  {{/returnSimpleType}}
{{/returnType}}
{{#bodyParam}}
    {{paramName}}.Free;
{{/bodyParam}}
  end;
{{/vendorExtensions.x-codegen-delphi-needs-free}}
end;

{{/operation}}
  
{{/operations}}
end.
