{{>header_autogen}}

unit {{classname}}.Rest;

interface

uses
  System.SysUtils,
  whizaxe.rest.CommandHandler,
  whizaxe.http.types,
  whizaxe.rest.Request,
  {{classname}}Interface;

type
{{#operations}}
  
  T{{classname}}NeededEvent = function(): I{{classname}} of object;
  
  // {$RTTI EXPLICIT METHODS([vcPublic])}
  T{{classname}}Rest = class 
  private
    FApi: I{{classname}};
    FOn{{classname}}Needed: T{{classname}}NeededEvent;
    procedure AskForApi;
  public
    {{#operation}}
    /// Operation {{{operationId}}}
    /// <summary>{{{summary}}}</summary>{{#remarks}}
    /// <remarks>{{.}}</remarks>{{/remarks}} 
    {{#allParams}}   
    /// {{paramName}}: {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
    {{/allParams}}   
    [RestApi('{{httpMethod}}', '{{{path}}}')]
    procedure {{operationId}}(ARequest: TRestRequest; var AResult: THTTPResult){{#isDeprecated}}; deprecated{{/isDeprecated}};
    
    {{/operation}}
    
    constructor Create();
    
    property On{{classname}}Needed: T{{classname}}NeededEvent read FOn{{classname}}Needed write FOn{{classname}}Needed;
  end;

implementation

uses
  whizaxe.serialization,
  whizaxe.OpenAPI.validators,
  whizaxe.REST.Exceptions,
  {{classname}}{{#imports}}{{#-first}},{{/-first}}
  {{{import}}}{{^-last}},{{/-last}}{{/imports}};
  
{ T{{classname}} }

constructor T{{classname}}Rest.Create();
begin
 inherited;
end;

procedure T{{classname}}Rest.AskForApi;
begin
  if not Assigned(FApi) then
  begin
    if Assigned(On{{classname}}Needed) then
      FApi := On{{classname}}Needed
    else
      raise EWxRestServiceException.Create('{{classname}} not initialized');
  end;
end;

{{#operation}}
procedure T{{classname}}Rest.{{operationId}}(ARequest: TRestRequest; var AResult: THTTPResult);
{{#vendorExtensions.x-codegen-delphi-needs-var}}
var
{{/vendorExtensions.x-codegen-delphi-needs-var}}
{{#allParams}}
  {{{paramName}}}: {{{dataType}}};
{{/allParams}}
  {{#returnType}}responseObj: {{{.}}};{{/returnType}}
begin
  AskForApi;
{{#vendorExtensions.x-codegen-delphi-returns-model}}
  responseObj := nil;
{{/vendorExtensions.x-codegen-delphi-returns-model}}
{{#pathParams}}
  {{#isInteger}}{{paramName}} := ARequest.GetPathParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isInteger}}
  {{#isNumber}}{{paramName}} := ARequest.GetPathParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isNumber}}
  {{#isBoolean}}{{paramName}} := ARequest.GetPathParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isBoolean}}
  {{#isString}}{{paramName}} := ARequest.GetPathParam('{{paramName}}', '{{{defaultValue}}}', {{required}});{{/isString}}
{{/pathParams}}
{{#queryParams}}
  {{#isInteger}}{{paramName}} := ARequest.GetQueryParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isInteger}}
  {{#isNumber}}{{paramName}} := ARequest.GetQueryParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isNumber}}
  {{#isBoolean}}{{paramName}} := ARequest.GetQueryParam('{{paramName}}', {{defaultValue}}, {{required}});{{/isBoolean}}
  {{#isString}}{{paramName}} := ARequest.GetQueryParam('{{paramName}}', '{{{defaultValue}}}', {{required}});{{/isString}}
{{/queryParams}}
{{#bodyParam}}
  {{paramName}} := ARequest.GetBodyParam<{{{dataType}}}>({{required}});
{{/bodyParam}}

{{#pathParams}}
  {{#isInteger}}TRestParamValidator.ValidateIntegerParam({{paramName}}, {{#minimum}}true, {{minimum}}{{/minimum}}{{^minimum}}false, 0{{/minimum}}, {{#maximum}}true, {{maximum}}{{/maximum}}{{^maximum}}false, 0{{/maximum}});{{/isInteger}}
  {{#isNumber}}TRestParamValidator.ValidateCurrencyParam({{paramName}}, {{#minimum}}true, {{minimum}}{{/minimum}}{{^minimum}}false, 0{{/minimum}}, {{#maximum}}true, {{maximum}}{{/maximum}}{{^maximum}}false, 0{{/maximum}}, 0);{{/isNumber}}
  {{#isString}}TRestParamValidator.ValidateStringParam({{paramName}}, {{required}}, {{#minLength}}{{minLength}}{{/minLength}}{{^minLength}}0{{/minLength}}, {{#maxLength}}{{maxLength}}{{/maxLength}}{{^maxLength}}0{{/maxLength}});{{/isString}}
{{/pathParams}}
{{#queryParams}}
  {{#isInteger}}TRestParamValidator.ValidateIntegerParam({{paramName}}, {{#minimum}}true, {{minimum}}{{/minimum}}{{^minimum}}false, 0{{/minimum}}, {{#maximum}}true, {{maximum}}{{/maximum}}{{^maximum}}false, 0{{/maximum}});{{/isInteger}}
  {{#isNumber}}TRestParamValidator.ValidateCurrencyParam({{paramName}}, {{#minimum}}true, {{minimum}}{{/minimum}}{{^minimum}}false, 0{{/minimum}}, {{#maximum}}true, {{maximum}}{{/maximum}}{{^maximum}}false, 0{{/maximum}}, 0);{{/isNumber}}
  {{#isString}}TRestParamValidator.ValidateStringParam({{paramName}}, {{required}}, {{#minLength}}{{minLength}}{{/minLength}}{{^minLength}}0{{/minLength}}, {{#maxLength}}{{maxLength}}{{/maxLength}}{{^maxLength}}0{{/maxLength}});{{/isString}}
{{/queryParams}}

{{#vendorExtensions.x-codegen-delphi-needs-free}}
  try
{{/vendorExtensions.x-codegen-delphi-needs-free}}
{{#bodyParam}}
    {{^isArray}}{{paramName}}.Validate;{{/isArray}}
{{/bodyParam}}
{{#headerParams}}
  {{paramName}} := ARequest.GetHeaderParam('{{paramName}}', '{{{defaultValue}}}', {{required}});
{{/headerParams}}
{{#returnType}}
    responseObj := FApi.{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});
    AResult.SetResult(hs2xx_OK, responseObj, 'OK');
{{/returnType}}
{{^returnType}}
    FApi.{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});
    AResult.SetResult(hs2xx_OK);
{{/returnType}}
{{#vendorExtensions.x-codegen-delphi-needs-free}}
  finally
{{#vendorExtensions.x-codegen-delphi-returns-model}}
    responseObj.Free;
{{/vendorExtensions.x-codegen-delphi-returns-model}}
{{#bodyParam}}
    {{paramName}}.Free;
{{/bodyParam}}
  end;
{{/vendorExtensions.x-codegen-delphi-needs-free}}
end;

{{/operation}}
  
{{/operations}}

end.
