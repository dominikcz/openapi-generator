unit ClientMainForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, VirtualTrees, Vcl.StdCtrls, Vcl.ExtCtrls,
  System.Net.HttpClient,  
  {{programName}}Client;

type
  TMainForm = class(TForm)
    FlowPanel1: TFlowPanel;
    Splitter1: TSplitter;
    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    btn{{operationId}}: TButton;{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
    Memo1: TMemo;  
    
    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    procedure btn{{operationId}}Click(Sender: TObject);
    {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}


  private
    { Private declarations }
    function getClient(): T{{programName}}Client;
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

uses
   Generics.Collections,
   whizaxe.openapi.config,
   whizaxe.serialization{{#models}}{{#-first}},{{/-first}}{{#model}}
  {{classFilename}}{{/model}}{{^-last}}, {{/-last}}{{/models}};

{$R *.dfm}

function TMainForm.getClient(): T{{programName}}Client;
var
  lConfig: TOpenApiConfig;
begin
  lConfig := TOpenApiConfig.Create;
  lConfig.basePath := '{{#servers}}{{#-first}}{{url}}{{/-first}}{{/servers}}';
  lConfig.ignoreCertificateErrors := true;
  
  result := T{{programName}}Client.Create(lConfig);
end;

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
procedure TMainForm.btn{{operationId}}Click(Sender: TObject);
{{^vendorExtensions.x-codegen-delphi-demo-code-client}}
var 
  lClient: T{{programName}}Client;{{#returnType}}
  resp: {{{.}}};{{/returnType}}{{#allParams}}
  {{{paramName}}}: {{{dataType}}};{{/allParams}}
begin
  // TODO: initilize params
  
  {{#allParams}}
  // {{{paramName}}} := ;
  {{/allParams}}

  lClient := getClient();
  try
    {{#returnType}}
    {{#vendorExtensions.x-codegen-delphi-returns-model}}
    resp := nil;
    try
    {{/vendorExtensions.x-codegen-delphi-returns-model}}
      resp := lClient.{{operationId}}({{#allParams}} {{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});
      {{^vendorExtensions.x-codegen-delphi-returns-model}}
      Memo1.Lines.Add(resp);
      {{/vendorExtensions.x-codegen-delphi-returns-model}}{{#vendorExtensions.x-codegen-delphi-returns-model}}
      Memo1.Lines.Add(TSerializer.SerializeObject(resp));
    finally
      resp.Free;
    end;
      {{/vendorExtensions.x-codegen-delphi-returns-model}}
  
    {{/returnType}}{{^returnType}}
    lClient.{{operationId}}({{#allParams}} {{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});
    Memo1.Lines.Add('OK');
    {{/returnType}}

  finally
    lClient.Free;
    {{#allParams}}
    {{#isModel}}{{{paramName}}}.Free;{{/isModel}}
  {{/allParams}}
    
  end;
end;
{{/vendorExtensions.x-codegen-delphi-demo-code-client}}
{{{vendorExtensions.x-codegen-delphi-demo-code-client}}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

end.
