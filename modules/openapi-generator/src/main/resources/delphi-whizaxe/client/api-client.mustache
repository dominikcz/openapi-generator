{{>header_for_modifications}}

unit {{programName}}Client;

interface
uses
  System.SysUtils,
  whizaxe.openapi.config,
  System.Generics.Collections,
  Rest.Types,
  Rest.Client,
  Rest.Authenticator.OAuth,
  rest.Authenticator.Basic,{{#apiInfo}}{{#apis}}{{#operations}}
  {{classname}}Interface{{^-last}}, {{/-last}}{{/operations}}{{/apis}}{{/apiInfo}}{{#models}}{{#-first}},{{/-first}}{{#model}}
  {{classFilename}}{{/model}}{{^-last}}, {{/-last}}{{/models}}
  ,Model.ExtInfo
  ,Model.UNKNOWN_BASE_TYPE;
type
  T{{programName}}Client = class(TInterfacedObject, {{#apiInfo}}{{#apis}}{{#operations}}
    I{{classname}}{{^-last}}, {{/-last}}{{/operations}}{{/apis}}{{/apiInfo}})
  private
    FOnAuthenticate: TAuthenticateEvent;
    procedure SetOnAuthenticate(const Value: TAuthenticateEvent);
  public
    constructor Create(AConfig: TOpenApiConfig);
    property OnAuthenticate: TAuthenticateEvent read FOnAuthenticate write SetOnAuthenticate;

    {{#apiInfo}}{{#apis}}{{#operations}}
    { {{baseName}} }

    {{#operation}}
    /// Operation {{{operationId}}}
    /// <summary>{{{summary}}}</summary>
    /// <remarks>{{remarks}}</remarks>

    {{#pathParams}}
    /// {{paramName}}: {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
    {{/pathParams}}
    procedure {{{operationId}}}({{#allParams}}const {{paramName}}: {{{dataType}}}{{^-last}}; {{/-last}}{{/allParams}}){{#isDeprecated}} @deprecated{{/isDeprecated}};
    {{/operation}}
    {{/operations}}{{/apis}}{{/apiInfo}}
  end;

implementation

{ TApiClient }

constructor T{{programName}}Client.Create(AConfig: TOpenApiConfig);
var
  lClient: TRESTClient;
  auth: TOAuth2Authenticator;
begin
  lClient := TRESTClient.Create('{{basePath}}');

  {{#authMethods}}
  {{#isBasicBearer}}
  auth := TOAuth2Authenticator.Create(nil);
  auth.AccessToken := '<put your token here>';
  auth.TokenType := TOAuth2TokenType.ttBEARER;
  {{/isBasicBearer}}
  {{/authMethods}}

  lClient.Authenticator := auth;
  lClient.Authenticator.OnAuthenticate := OnAuthenticate;
end;

procedure T{{programName}}Client.SetOnAuthenticate(const Value: TAuthenticateEvent);
begin
  FOnAuthenticate := Value;
end;

{{#apiInfo}}{{#apis}}{{#operations}}
{{#operation}}
procedure T{{programName}}Client.{{operationId}}({{#allParams}}const {{paramName}}: {{{dataType}}}{{^-last}}; {{/-last}}{{/allParams}});
begin
end;

{{/operation}}
{{/operations}}{{/apis}}{{/apiInfo}}

end.