{{>header_for_modifications}}

unit {{programName}}Client;

interface
uses
  System.SysUtils,
  whizaxe.openapi.config,
  Rest.Types,
  Rest.Client,
  Rest.Authenticator.OAuth,
  rest.Authenticator.Basic,{{#apiInfo}}{{#apis}}{{#operations}}
  {{classname}}Interface{{^-last}}, {{/-last}}{{/operations}}{{/apis}}{{/apiInfo}}{{#models}}{{#-first}},{{/-first}}{{#model}}
  {{classFilename}}{{/model}}{{^-last}}, {{/-last}}{{/models}}
  ,Model.ExtInfo
  ,Model.UNKNOWN_BASE_TYPE
  ,Generics.Collections
  ,System.Classes;
  
  
type
  T{{programName}}Client = class(TInterfacedObject, {{#apiInfo}}{{#apis}}{{#operations}}
    I{{classname}}{{^-last}}, {{/-last}}{{/operations}}{{/apis}}{{/apiInfo}})
  private
    FOnAuthenticate: TAuthenticateEvent;
    FConfig: TOpenApiConfig;
    {{#authMethods}}{{#isBasicBearer}}
    FAuth: TOAuth2Authenticator;
    {{/isBasicBearer}}{{/authMethods}}
    procedure SetOnAuthenticate(const Value: TAuthenticateEvent);
    function GetRESTRequestMethod(const AMethodName: string): TRESTRequestMethod;
    function MakeRestClient: TRestClient;
  public
    constructor Create(AConfig: TOpenApiConfig);
    property OnAuthenticate: TAuthenticateEvent read FOnAuthenticate write SetOnAuthenticate;

    {{#apiInfo}}{{#apis}}{{#operations}}
    { {{baseName}} }

    {{#operation}}
    /// Operation {{{operationId}}}
    /// <summary>{{{summary}}}</summary>
    /// <remarks>{{remarks}}</remarks>

    {{#pathParams}}
    /// {{paramName}}: {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
    {{/pathParams}}
    {{#returnType}}function {{{operationId}}}({{#allParams}}const {{paramName}}: {{{dataType}}}{{^-last}}; {{/-last}}{{/allParams}}): {{{returnType}}}{{#isDeprecated}} @deprecated{{/isDeprecated}};{{/returnType}}
    {{^returnType}}procedure {{{operationId}}}({{#allParams}}const {{paramName}}: {{{dataType}}}{{^-last}}; {{/-last}}{{/allParams}}){{#isDeprecated}} @deprecated{{/isDeprecated}};{{/returnType}}
    
    {{/operation}}
    {{/operations}}{{/apis}}{{/apiInfo}}
  end;

implementation

uses
  whizaxe.serialization;

{ TApiClient }

constructor T{{programName}}Client.Create(AConfig: TOpenApiConfig);
var
  lClient: TRESTClient;
  auth: TOAuth2Authenticator;
begin
  FConfig := AConfig;
 
  {{#authMethods}}
  {{#isBasicBearer}}
  FAuth := TOAuth2Authenticator.Create(nil);
  FAuth.AccessToken := '<put your token here>';
  FAuth.TokenType := TOAuth2TokenType.ttBEARER;
  FAuth.OnAuthenticate := OnAuthenticate;
  {{/isBasicBearer}}
  {{/authMethods}}

end;

function T{{programName}}Client.GetRESTRequestMethod(const AMethodName: string): TRESTRequestMethod;
var
  methodName: string;
begin
  methodName := AMethodName.ToUpper();
  if methodName = 'POST' then
    Result := rmPOST
  else if methodName = 'PUT' then
    Result := rmPUT
  else if methodName = 'DELETE' then
    Result := rmDELETE
  else if methodName = 'PATCH' then
    Result := rmPATCH
  else
    Result := rmGET;
end;

procedure T{{programName}}Client.SetOnAuthenticate(const Value: TAuthenticateEvent);
begin
  FOnAuthenticate := Value;
end;

function T{{programName}}Client.MakeRestClient: TRestClient;
begin
  Result := TRESTClient.Create(FConfig.basePath);
  {{#authMethods}}{{#isBasicBearer}}
  Result.Authenticator := FAuth;
  {{/isBasicBearer}}{{/authMethods}}
end;

{{#apiInfo}}{{#apis}}{{#operations}}
{{#operation}}
{{#returnType}}function T{{programName}}Client.{{{operationId}}}({{#allParams}}const {{paramName}}: {{{dataType}}}{{^-last}}; {{/-last}}{{/allParams}}): {{{returnType}}};{{/returnType}}{{^returnType}}procedure T{{programName}}Client.{{{operationId}}}({{#allParams}}const {{paramName}}: {{{dataType}}}{{^-last}}; {{/-last}}{{/allParams}});{{/returnType}}
var 
  restRequest: TRestRequest;
  restClient: TRestClient;
  restResponse: TRESTResponse;
begin
  restClient := MakeRestClient;
  {{#returnType}}Result := nil;{{/returnType}}
  try
    restRequest := TRESTRequest.Create(restClient);
    restRequest.Resource := '{{path}}';
    {{#pathParams}}
    restRequest.AddParameter('{{paramName}}', {{paramName}}{{^isString}}.ToString(){{/isString}}, pkURLSEGMENT);
    {{/pathParams}}
    {{#queryParams}}
    restRequest.AddParameter('{{paramName}}', {{paramName}}{{^isString}}.ToString(){{/isString}}, pkQUERY);
    {{/queryParams}}
    {{#bodyParams}}
    restRequest.AddBody(TSerializer.ObjectToJSON({{paramName}}), TRESTContentType.ctAPPLICATION_JSON);
    {{/bodyParams}}
    restRequest.Execute;
    {{#returnType}}if restResponse.StatusCode = 200 then
      Result := {{#isArray}}TSerializer.JsonToObjectList<T{{returnBaseType}}>{{/isArray}}{{^isArray}}TSerializer.JsonToObject<{{returnType}}>{{/isArray}}(restRequest.Response.Content);{{/returnType}}
   
  finally
    restClient.Free;
  end;
end;


{{/operation}}
{{/operations}}{{/apis}}{{/apiInfo}}

end.