unit FormMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  whizaxe.rest.Request,
  whizaxe.rest.Server,
  whizaxe.http.types,{{#apiInfo}}{{#apis}}{{#operations}}
  {{classname}}Interface,
  {{classname}},{{/operations}}{{/apis}}{{/apiInfo}}

  {{programName}}Server;

type
  TMainForm = class(TForm)
    edtServerPort: TLabeledEdit;
    btnStart: TButton;
    Memo1: TMemo;
    procedure btnStartClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    { Private declarations }
    FServer: T{{programName}}Server;

{{#apiInfo}}{{#apis}}{{#operations}}
    F{{classname}}: I{{classname}};{{/operations}}{{/apis}}{{/apiInfo}}

{{#apiInfo}}{{#apis}}{{#operations}}
    function hnd{{classname}}Needed: I{{classname}};{{/operations}}{{/apis}}{{/apiInfo}}

    procedure hndOnAuthorization(ARequest: TRestRequest; var AResult: THTTPResult; var AllowToExecute : Boolean);
    procedure hndAfterRequest(dtStart, dtStop: TDateTime; ARequest: TRestRequest; AReqKind: TRequestKind;
      var AResult: THTTPResult);
    procedure hndAfterCommand(ARequest: TRestRequest; var AResult: THTTPResult);

  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

uses
  whizaxe.openapi.config;

{$R *.dfm}

procedure TMainForm.btnStartClick(Sender: TObject);
begin
  btnStart.Enabled := false;
  FServer.Port := StrToIntDef(edtServerPort.Text, {{serverPort}}{{^serverPort}}8080{{/serverPort}});
  FServer.Start;
end;

procedure TMainForm.FormCreate(Sender: TObject);
var
  lConfig: TOpenApiConfig;
begin
  lConfig := TOpenApiConfig.Create;
  lConfig.basePath := '{{#servers}}{{#-first}}{{url}}{{/-first}}{{/servers}}';
  lConfig.ignoreCertificateErrors := true;

  FServer := T{{programName}}Server.Create;
  FServer.ApplyConfig(lConfig);
  fServer.OnAfterRequest := hndAfterRequest;
  fServer.OnAfterCommand := hndAfterCommand;
  lConfig.Free;

  FServer.OnAuthorization := hndOnAuthorization;

{{#apiInfo}}{{#apis}}{{#operations}}
  F{{classname}} := T{{classname}}.Create;
  FServer.On{{classname}}Needed := hnd{{classname}}Needed;
{{/operations}}{{/apis}}{{/apiInfo}}
end;

procedure TMainForm.FormDestroy(Sender: TObject);
begin
  FServer.Stop;
  sleep(1000);
  FServer.Free;
end;

procedure TMainForm.hndAfterCommand(ARequest: TRestRequest; var AResult: THTTPResult);
begin
  memo1.Lines.Add(format('%s, Authorization: %s => %d %s', [ARequest.Document, ARequest.GetHeaderParam('Authorization', ''), AResult.Code, AResult.Msg]));
end;

procedure TMainForm.hndAfterRequest(dtStart, dtStop: TDateTime; ARequest: TRestRequest; AReqKind: TRequestKind;
  var AResult: THTTPResult);
begin

end;

procedure TMainForm.hndOnAuthorization(ARequest: TRestRequest; var AResult: THTTPResult; var AllowToExecute : Boolean);
begin
  AllowToExecute := true;
end;

{{#apiInfo}}{{#apis}}{{#operations}}
function TMainForm.hnd{{classname}}Needed: I{{classname}};
begin
  result := F{{classname}};
end;
{{/operations}}{{/apis}}{{/apiInfo}}

end.
